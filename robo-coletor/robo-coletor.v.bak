module Robo (  
	output reg advance, turn, collect,
	input head, left, barrier, under, clock, reset
);

    `define STAND_BY 3'b000;
    `define COLLECT_TRASH 3'b001;
    `define FOLLOW_THE_WALL 3'b010;
    `define SEARCH_THE_WALL 3'b011;
    `define TURN_90 3'b100;

    `define ACTIVE 1'b1;


    reg [2:0] state = `STAND_BY; 
    reg [2:0] future_state = `STAND_BY;


    always @(posedge clock)
    begin
        if (reset)
          state <= `STAND_BY;
        else 
            state <= future_state;
    end

    always @(state) begin
        case (state)
            `STAND_BY: begin
                if(head == 1'b1 && left == 1'b0 && under == 1'b1 && barrier == 1'b0)
                begin
                    turn = `ACTIVE;
                    advance = ~`ACTIVE;
                    collect = ~`ACTIVE;
                    future_state = `STAND_BY;
                end

                if(head == 1'b0 && left == 1'bx && under == 1'b1 && barrier == 1'b1 && reset == 1'b1)
                begin
                    turn = ~`ACTIVE;
                    advance = ~`ACTIVE;
                    collect = `ACTIVE;
                    future_state = `COLLECT_TRASH;
                end

                if(head == 1'b0 && left == 1'b1 && under == 1'b1 && barrier == 1'b0 && reset == 1'b1)
                begin
                    turn = ~`ACTIVE;
                    advance = `ACTIVE;
                    collect = ~`ACTIVE;
                    future_state = `FOLLOW_THE_WALL;
                end
                
                if(head == 1'b0 && left == 1'b0 && under == 1'b1 && barrier == 1'b0 && reset == 1'b1)
                begin
                    turn = ~`ACTIVE;
                    advance = `ACTIVE;
                    collect = ~`ACTIVE;
                    future_state = `SEARCH_THE_WALL;
                end
            end

            `COLLECT_TRASH: begin
                if(head == 1'bx && left == 1'bx && under == 1'b0 && barrier == 1'b1)
                begin
                    turn = ~`ACTIVE;
                    advance = ~`ACTIVE;
                    collect = `ACTIVE;
                    future_state = `COLLECT_TRASH;
                end
                
                if(head == 1'b0 && left == 1'b0 && under == 1'b0 && barrier == 1'b0)
                begin
                    turn = ~`ACTIVE;
                    advance = `ACTIVE;
                    collect = ~`ACTIVE;
                    future_state = `SEARCH_THE_WALL;
                end

                if(head == 1'b0 && left == 1'b1 && under == 1'b0 && barrier == 1'b0)
                begin
                    turn = ~`ACTIVE;
                    advance = `ACTIVE;
                    collect = ~`ACTIVE;
                    future_state = `FOLLOW_THE_WALL;
                end                
            end

            `FOLLOW_THE_WALL: begin
                if(head == 1'bx && left == 1'bx && under == 1'b1 && barrier == 1'bx)
                begin
                    turn = ~`ACTIVE;
                    advance = ~`ACTIVE;
                    collect = ~`ACTIVE;
                    future_state = `STAND_BY;
                end
                
                if(head == 1'b0 && left == 1'b1 && under == 1'b0 && barrier == 1'b0)
                begin
                    turn = ~`ACTIVE;
                    advance = `ACTIVE;
                    collect = ~`ACTIVE;
                    future_state = `FOLLOW_THE_WALL;
                end

                if(head == 1'bx && left == 1'bx && under == 1'b0 && barrier == 1'b1)
                begin
                    turn = ~`ACTIVE;
                    advance = ~`ACTIVE;
                    collect = `ACTIVE;
                    future_state = `COLLECT_TRASH;
                end

                if(head == 1'b1 && left == 1'bx && under == 1'b0 && barrier == 1'b0)
                begin
                    turn = `ACTIVE;
                    advance = ~`ACTIVE;
                    collect = ~`ACTIVE;
                    future_state = `SEARCH_THE_WALL;
                end

                if(head == 1'b0 && left == 1'b0 && under == 1'b0 && barrier == 1'b0)
                begin
                    turn = `ACTIVE;
                    advance = ~`ACTIVE;
                    collect = ~`ACTIVE;
                    future_state = `SEARCH_THE_WALL;
                end
            end

            `SEARCH_THE_WALL: begin
                if(head == 1'b0 && left == 1'b0 && under == 1'b0 && barrier == 1'b0)
                begin
                    turn = ~`ACTIVE;
                    advance = `ACTIVE;
                    collect = ~`ACTIVE;
                    future_state = `SEARCH_THE_WALL;
                end

                if(head == 1'bx && left == 1'bx && under == 1'b1 && barrier == 1'bx)
                begin
                    turn = ~`ACTIVE;
                    advance = ~`ACTIVE;
                    collect = ~`ACTIVE;
                    future_state = `STAND_BY;
                end

                if(head == 1'b0 && left == 1'b1 && under == 1'b0 && barrier == 1'b0)
                begin
                    turn = ~`ACTIVE;
                    advance = `ACTIVE;
                    collect = ~`ACTIVE;
                    future_state = `FOLLOW_THE_WALL;
                end

                if(head == 1'b1 && left == 1'bx && under == 1'b0 && barrier == 1'b0)
                begin
                    turn = `ACTIVE;
                    advance = ~`ACTIVE;
                    collect = ~`ACTIVE;
                    future_state = `TURN_90;
                end

                if(head == 1'b0 && left == 1'bx && under == 1'b0 && barrier == 1'b1)
                begin
                    turn = ~`ACTIVE;
                    advance = ~`ACTIVE;
                    collect = `ACTIVE;
                    future_state = `COLLECT_TRASH;
                end
            end

            `TURN_90: begin
                if(head == 1'b0 && left == 1'b1 && under == 1'b0 && barrier == 1'b0)
                begin
                    turn = ~`ACTIVE;
                    advance = `ACTIVE;
                    collect = ~`ACTIVE;
                    future_state = `FOLLOW_THE_WALL;
                end

                if(head == 1'b1 && left == 1'bx && under == 1'b0 && barrier == 1'b0)
                begin
                    turn = `ACTIVE;
                    advance = ~`ACTIVE;
                    collect = ~`ACTIVE;
                    future_state = `TURN_90;
                end

                if(head == 1'b1 && left == 1'bx && under == 1'b0 && barrier == 1'b0)
                begin
                    turn = `ACTIVE;
                    advance = ~`ACTIVE;
                    collect = ~`ACTIVE;
                    future_state = `TURN_90;
                end

                if(head == 1'bx && left == 1'bx && under == 1'b0 && barrier == 1'b1)
                begin
                    turn = ~`ACTIVE;
                    advance = ~`ACTIVE;
                    collect = `ACTIVE;
                    future_state = `COLLECT_TRASH;
                end
            end
            default: begin
                turn = ~`ACTIVE;
                advance = ~`ACTIVE;
                collect = ~`ACTIVE;
                future_state = `STAND_BY;
            end
        endcase
    end
endmodule